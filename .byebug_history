continue
skip_statement_cache?
continue
skip_statement_cache?
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/associations/collection_association.rb:302
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/connection_adapters/abstract/database_statements.rb:22
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/connection_adapters/abstract/database_statements.rb:22
exit
binds
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/querying.rb:39
exit
continue
skip_statement_cache?
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/associations/collection_association.rb:302
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/associations/collection_association.rb:29
continue
skip_statement_cache?
continue
skip_statement_cache?
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/associations/collection_association.rb:302
exit
scope
skip_statement_cache?
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/associations/collection_association.rb:302
find_target?
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/associations/collection_association.rb:268
@association
method(:load_target).source_location
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/associations/collection_proxy.rb:1028
exit
transform_value(1)
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/associations/collection_association.rb:307
break /stockanalyzer/jsonb_assoc/lib/jsonb_assoc/associations/association_scope.rb:9
break /jsonb_assoc/lib/jsonb_assoc/associations/association_scope.rb:16
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/associations/collection_association.rb:307
break /stockanalyzer/jsonb_assoc/lib/jsonb_assoc/associations/association_scope.rb:16
break stockanalyzer/jsonb_assoc/lib/jsonb_assoc/associations/association_scope.rb:16
break /jsonb_assoc/lib/jsonb_assoc/associations/association_scope.rb:16
exit
cde
cde.to_h[:store] = 123
cde = {}
abc.to_h[:store]
abc[:store]
abc = nil
{}.to_h
nil.to_h
nil.dig(:store)
association.inversed
association = association_instance_get(reflection.name)
continue
association.loaded?
!association.stale_target?
association.loaded?
association && association.loaded? && !association.stale_target?
association = association_instance_get(reflection.name)
continue
association = association_instance_get(reflection.name)
continue
self
self.stock
association_instance_get(:stock)
reflection.name
association = association_instance_get(reflection.name)
self
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/autosave_association.rb:466
continue
exit
reflection.name
reflection
self
association = association_instance_get(reflection.name)
association && association.loaded? && !association.stale_target?
association = association_instance_get(reflection.name)
self
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/autosave_association.rb:466
target
target.send(method, *arguments, &block)
target
self
next
result
next
continue
self
continue
result
next
@arguments
continue
break /usr/local/bundle/gems/activesupport-5.1.0/lib/active_support/callbacks.rb:391
env
env.halted
env.halted = halted_lambda.call(target, result_lambda)
result_lambda = -> { user_callback.call target, value }
halted = env.halted
value  = env.value
target = env.target
break /usr/local/bundle/gems/activesupport-5.1.0/lib/active_support/callbacks.rb:599
halted_lambda
env.halted
env.value
env.target
env
value
target
continue
break /usr/local/bundle/gems/activesupport-5.1.0/lib/active_support/callbacks.rb:192
continue
break /usr/local/bundle/gems/activesupport-5.1.0/lib/active_support/callbacks.rb:191
next_sequence
continue
break /usr/local/bundle/gems/activesupport-5.1.0/lib/active_support/callbacks.rb:129
self
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/persistence.rb:129
self
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/transactions.rb:307
self
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/persistence.rb:266
self
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/persistence.rb:562
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/timestamp.rb:99
continue
exit
self
should_record_timestamps?
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/timestamp.rb:99
method(:_update_record).super_method.super_method.super_method.super_method.source_location
method(:_update_record).super_method.super_method.super_method.source_location
method(:_update_record).super_method.super_method.source_location
method(:_update_record).super_method.source_location
method(:_update_record).source_location
model
attribute_names
args
continue
attribute_names
args
continue
args
attribute_names
continue
attribute_names
continue
def some_method(abstract = 'abstract')
block
*args
args
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/persistence.rb:562
continue
self.attribute_names
attribute_names
attriubte_names
attirubte_names
attribute_names.class
method(:attribute_names).source_location
attribute_names
self.attribute_names
self.method(:attribute_names).source_location
self.method(:attribute_names)
attribute_names
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/persistence.rb:570
continue
info breakpoints
break info
breakpoints
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/persistence.rb:569
continue
 break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/persistence.rb:569
attribute_names
self.attribute_names
block
args
continue
 break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/persistence.rb:562
exit
self.attribute_names
attribute_names
continue
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/persistence.rb:570
exit
update_attribute(:stock_id, 2)
update_attribute(:stock_id, 6)
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/persistence.rb:570
continue
@_after_create_counter_called
continue
@_after_create_counter_called
continue
@_after_create_counter_called
continue
exit
earning.update_attribute(:stock_id, 6)
earning.update_attribute(:stock_id, 2)
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/associations/builder/belongs_to.rb:32
earning = Earning.last
exit
earning.belongs_to_counter_cache_after_update(earning.association(:stock).reflection)
earning.saved_change_to_attribute?(foreign_key)
earning['extra']['stock_id'] = 2
earning['extra']
earning.saved_change_to_attribute?(foreign_key)
earning.stock = Stock.last
earning.stock
earning.saved_change_to_attribute?(foreign_key)
saved_change_to_attribute?(foreign_key)
foreign_key = earning.association(:stock).reflection.foreign_key
earning.association(:stock).reflection.foreign_key
earning.association(:stock).reflection
Stock.method(:increment_counter).source_location
Stock.method(:increment_counter)
earning.stock = Stock.first
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/associations/builder/belongs_to.rb:32
earning.stock = Stock.last
earning.stock = Stock.first
earning = Earning.last
exit
self.save
stock = Stock.last
stock.reload
stock
self.save
break /usr/local/bundle/gems/activerecord-5.1.0/lib/active_record/associations/builder/belongs_to.rb:32
save
stock = Stock.first
stock = Stock.last
stock = amba
stock
exit
self.stock
self.reload
stock
self
self.save
save
